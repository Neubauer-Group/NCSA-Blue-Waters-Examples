#!/bin/bash

# Set the number of processing elements (PEs) or cores
# Set the number of PEs per node
#PBS -l nodes=1:ppn=8:xk

# Set the wallclock time
#PBS -l walltime=00:30:00

# Set the job name
#PBS -N testjob

# Set the job stdout and stderr
#PBS -e "${PBS_JOBID.err}"
#PBS -o "${PBS_JOBID.out}"

# Set email notification on termination or abort
#PBS -m ea
#PBS -M username@host

# If you launched the job in a directory prepared for the job to run within,
# you'll want to cd to that directory
# [uncomment the following line to enable this]
# cd "${PBS_O_WORKDIR}"

# Alternatively, the job script can create its own job-ID-unique directory
# to run within.  In that case you'll need to create and populate that
# directory with executables and perhaps inputs
# [uncomment and customize the following lines to enable this behavior]
# mkdir -p "/scratch/sciteam/${USER}/${PBS_JOBID}"
# cd "/scratch/sciteam/${USER}/${PBS_JOBID}"
# cp "/scratch/sciteam/${USER}/hello_world_example/*" .

mkdir -p "/scratch/sciteam/${USER}/${PBS_JOBID}"
cd "/scratch/sciteam/${USER}/${PBS_JOBID}"
cp /scratch/sciteam/"${USER}"/hello_world_example/* .

aprun \
  --bypass-app-transfer \
  --pes-per-node 1 \
  --cpu-binding none \
  /bin/bash hello_world.sh "${USER}" >> "out.${PBS_JOBID}"
